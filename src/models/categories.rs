//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::models::categories;
use crate::utils::format_datetime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "categories")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Deserialize)]
pub struct NewCategory {
    pub name: String,
}
// Category response schema
#[derive(Debug, Serialize, Deserialize)]
pub struct CategoryResponse {
    pub id: Uuid,
    pub name: String,
    pub created_at: String,
    pub updated_at: String,
}

impl CategoryResponse {
    pub fn from_model(category: categories::Model) -> Self {
        Self {
            id: category.id,
            name: category.name,
            created_at: format_datetime(category.created_at),
            updated_at: format_datetime(category.updated_at),
        }
    }
}
