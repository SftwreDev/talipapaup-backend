//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::models::products;
use crate::utils::{format_datetime, format_money};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub product_name: String,
    pub description: String,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))")]
    pub price: Decimal,
    pub category: String,
    pub img_url: String,
    pub is_available: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Deserialize)]
pub struct NewProducts {
    pub name: String,
}

// Product response schema
#[derive(Debug, Serialize, Deserialize)]
pub struct ProductsResponse {
    pub id: Uuid,
    pub product_name: String,
    pub description: String,
    pub price: String,
    pub category: String,
    pub img_url: String,
    pub is_available: bool,
    pub created_at: String,
    pub updated_at: String,
}

impl crate::models::products::ProductsResponse {
    pub fn from_model(products: products::Model) -> Self {
        Self {
            id: products.id,
            product_name: products.product_name,
            description: products.description,
            price: format_money(f64::try_from(products.price).unwrap()),
            category: products.category,
            img_url: products.img_url,
            is_available: products.is_available,
            created_at: format_datetime(products.created_at),
            updated_at: format_datetime(products.updated_at),
        }
    }
}

#[derive(Deserialize)]
pub struct NewProduct {
    pub product_name: String,
    pub description: String,
    pub price: Decimal,
    pub category: String,
    pub img_url: String,
    pub is_available: bool,
}
